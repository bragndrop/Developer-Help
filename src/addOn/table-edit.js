frame_data["table-edit"] = {"xml":"<div title=\"table-edit\"><div class=\"components\"><div class=\"addButtons\" title=\"select table button\">\n    <script>\n        addCustomButton(inEditor, \"selTable\", \"Get Table\", \"\", \"\", \"table td, table th\");\n\n        inEditor.find(\"#selTable\").click(function (event) {\n            var elm = selectedElement();\n            focusElement(elm.closest(\"table\"));\n            event.stopPropagation();\n        });\n    </script>\n</div>\n<div class=\"addButtons\" title=\"select row button\">\n    <script>\n        addCustomButton(inEditor, \"selRow\", \"Get Row\", \"\", \"\", \"table td, table th\");\n\n        inEditor.find(\"#selRow\").click(function (event) {\n            var elm = selectedElement();\n\n            if (elm.is(\"th\")){\n                if (elm.closest(\"thead\").length > 0){\n                    focusElement(elm.closest(\"thead\"));\n                }else if (elm.closest(\"tfoot\").length > 0){\n                    focusElement(elm.closest(\"tfoot\"));\n                }else{\n                    focusElement(elm.closest(\"tr\"));\n                }\n\n            }else{\n                focusElement(elm.closest(\"tr\"));\n            }\n            event.stopPropagation();\n        });\n\n    </script>\n</div>\n<div class=\"addButtons\" title=\"add column button\">\n    <script>\n        addCustomButton(inEditor, \"addCol\", \"Add Column\", \"\", \"\", \"table td, table th\", \"tfoot td, tfoot th\");\n\n        inEditor.find(\"#addCol\").click(function (event) {\n            var elm = selectedElement();\n            var idx = elm.index();\n\n            elm.closest(\"table\").find(\"thead\").find(\"tr\").each(function () {\n                $(this).children().eq(idx).after(\"<th class='ag-new-col'><span class='ag-text'>New Column</span></th>\");\n            });\n            elm.closest(\"table\").find(\"tbody\").find(\"tr\").each(function () {\n                $(this).children().eq(idx).after(\"<td class='ag-new-col'><span class='ag-text'></span></td>\");\n            });\n            elm.closest(\"table\").find(\"tfoot\").find(\"tr\").each(function () {\n                if($(this).children().is(\"td\")){\n                    $(this).children().eq(idx).after(\"<td class='ag-new-col'><span class='ag-text'></span></td>\");\n                }else{\n                    $(this).children().eq(idx).after(\"<th class='ag-new-col'><span class='ag-text'></span></th>\");\n                }\n            });\n\n            var content = editFrameContent();\n            content.find(\".ag-new-col\").wrap(\"<div class='newStuff'></div>\");\n            content.find(\".ag-new-col\").removeClass(\"ag-new-col\");\n            runUndoAddNew(false);\n            finishNewElem(content, false, false);\n\n            setTimeout(function(){ \n                focusElement(elm.next());\n            }, 100);\n\n            event.stopPropagation();\n        });\n\n    </script>\n</div>\n<div class=\"addButtons\" title=\"merge with cell on the right button\">\n    <script>\n        addCustomButton(inEditor, \"mergeR\", \"Merge\", \"arrow-right\", \"Merge Right\", \"td, tfoot th\");\n\n        function mergeRightCell(runUndo){\n            var elm = selectedElement();\n            if (elm.next().length > 0) {\n\n                var elmNext = elm.next();\n                var conts = elmNext.contents();\n                elm.append(conts);\n                elmNext.detach();\n                var cs = attrExist(elm, \"colspan\");\n                if (cs == \"\") {\n                    elm.attr(\"colspan\", 2);\n                } else {\n                    elm.attr(\"colspan\", Number(cs) + 1);\n                }\n                focusElement(elm);\n\n                if (runUndo == true){\n                    undoManager.add({\n                        undo: function() {\n                            showIfHidden(elm);\n                            elm.after(elmNext);\n                            elmNext.append(conts);\n                            var cs = attrExist(elm, \"colspan\");\n                            if (cs != \"\") {\n                                var cols = Number(elm.attr(\"colspan\"));\n                                if (cols == 2){\n                                    elm.removeAttr(\"colspan\");\n                                }else{\n                                    elm.attr(\"colspan\", cols - 1);\n                                }\n                            }\n                            resetBreadcrumbAndProps(elm, false);\n                        },\n                        redo: function() {\n                            showIfHidden(elm);\n                            mergeRightCell(false);\n                            resetBreadcrumbAndProps(elm, false);\n                        }\n                    });\n\n                    undoRedoStatus();\n                }\n\n            }\n        }\n\n\n        inEditor.find(\"#mergeR\").click(function (event) {\n            mergeRightCell(true);\n            event.stopPropagation();\n        });\n\n    </script>\n</div>\n<div class=\"addButtons\" title=\"merge with bottom cell button\">\n    <script>\n        addCustomButton(inEditor, \"mergeB\", \"Merge\", \"arrow-down\", \"Merge Down\", \"td\");\n\n        function mergeBottomCell(runUndo){\n            var elm = selectedElement();\n\n            var rs = attrExist(elm, \"rowspan\");\n            var rsNxt = elm.closest(\"tr\").next();\n            if (rs != \"\") {\n                var rspn = Number(rs);\n                for (var i = 2; i <= rspn; i++) {\n                    rsNxt = rsNxt.next();\n                }\n            }\n\n            var rIndx = elm.index();\n            var tdPrev = elm.prev();\n            while (tdPrev.length != 0){\n                var rsPrev = attrExist(tdPrev, \"rowspan\");\n                if (rsPrev != \"\"){\n                    rIndx = rIndx -1;\n                }\n                tdPrev = tdPrev.prev();\n            }\n            if (rIndx < 0){\n                rIndx = 0;\n            }\n            var cellBottom = rsNxt.children().eq(rIndx);\n\n            if (cellBottom.length > 0) {\n\n                var cellBottomAttachInfo = reAttachHow(cellBottom);\n\n                var conts = cellBottom.contents();\n                elm.append(conts);\n\n                cellBottom.detach();\n\n                if (rs == \"\") {\n                    elm.attr(\"rowspan\", 2);\n                } else {\n                    elm.attr(\"rowspan\", Number(rs) + 1);\n                }\n                focusElement(elm);\n\n                if (runUndo == true){\n\n                    undoManager.add({\n                        undo: function() {\n                            showIfHidden(elm);\n                            reAttachNow(cellBottomAttachInfo);\n\n                            cellBottom.append(conts);\n                            var rs = attrExist(elm, \"rowspan\");\n                            if (rs != \"\") {\n                                var rows = Number(elm.attr(\"rowspan\"));\n                                if (rows == 2){\n                                    elm.removeAttr(\"rowspan\");\n                                }else{\n                                    elm.attr(\"rowspan\", rows - 1);\n                                }\n                            }\n                            resetBreadcrumbAndProps(elm, false);\n                        },\n                        redo: function() {\n                            showIfHidden(elm);\n                            mergeBottomCell(false);\n                            resetBreadcrumbAndProps(elm, false);\n                        }\n                    });\n\n                    undoRedoStatus();\n                }\n            }\n        }\n\n\n        inEditor.find(\"#mergeB\").click(function (event) {\n            mergeBottomCell(true)\n            event.stopPropagation();\n        });\n\n    </script>\n</div>\n<div class=\"whenDrag\">\n    <script>\n        // Dropping into table cell\n        if (dropTag == \"td\") {\n            isOut = false;\n        }\n\n        // Dropping into table header\n        if (dropTag == \"th\") {\n            isOut = false;\n        }\n    </script>\n</div>\n<div class=\"beforeRemove\">\n    <script>\n\n        // when we remove a table column cell (th), we also want remove the rest of the column with it\n        // however we also want to log all the cells that are removed into the undo/redo commands\n        if (elm.is(\"th\")) {//is table header\n            if (elm.parent().is(\"tr\")) {//is defo table header\n                if (elm.parent().parent().is(\"thead\")) {//is defo table header\n                    var thIndex = elm.index();\n                    var table = elm.closest(\"table\");\n\n                    //first we log what items are removed and how we will put them back\n                    table.find(\"tbody\").find(\"tr\").each(function () {\n                        var td = $(this).children().eq(thIndex);\n                        if (td.length > 0){\n                            extraDetach.push(reAttachHow(td));\n                        }\n                    });\n\n                    //second we remove the item\n                    table.find(\"tbody\").find(\"tr\").each(function () {\n                        var td = $(this).children().eq(thIndex);\n                        if (td.length > 0){\n                            td.detach();\n                        }\n                    });\n\n                    //do the same for the table footer\n                    table.find(\"tfoot\").find(\"tr\").each(function () {\n                        var td = $(this).children().eq(thIndex);\n                        if (td.length > 0){\n                            extraDetach.push(reAttachHow(td));\n                        }\n                    });\n                    table.find(\"tfoot\").find(\"tr\").each(function () {\n                        var td = $(this).children().eq(thIndex);\n                        if (td.length > 0){\n                            td.detach();\n                        }\n                    });\n                }\n            }\n        }\n    </script>\n</div>\n</div></div>"};