frame_data["html-rules"] = {"xml":"<div title=\"html-rules\"><div class=\"components\"><div class=\"allowed-XSS-code\" title=\"Allow these attributes when filtering for XSS\">\n    <script>\n        allowedXSS[\"attributes\"].push(\"title\", \"target\");\n    </script>\n</div>\n<div class=\"whenDrag\">\n    <script>\n        // Dropping into BODY\n        if (dropTag == \"body\") {\n            // therefore only drop inside\n            isOut = false; \n        }\n\n        // list group can only be droped inside list item <li>pppp<ul>...</ul></li> NOT <li>pppp</li><ul>...</ul>\n        if (dropTag == \"li\") { //is list item\n            // drop only inside list item not outside\n            isOut = false; \n        }\n\n        //list items can only be dropped inside list items\n        if (dragTag == \"li\") {\n            if (dropTag == \"li\") {\n                isOut = true;\n            } else if (dropTag == \"ol\") {\n                isOut = false;\n            } else if (dropTag == \"ul\") {\n                isOut = false;\n            } else {\n                if (elmDrop.parent().closest(\"li\").length > 0) {\n                    elm = elmDrop.parent().closest(\"li\");\n                    elmDrop = elm;\n                    isOut = true;\n                }else{\n                    notAllowedMessage = \"Must be placed inside List!\";\n                    finalShow = false;\n                }\n            }\n        }\n\n        // Dropping into description tag\n        if (dropTag == \"dd\") {\n            // therefore only drop inside\n            isOut = false;\n        }\n\n\n\n        // A link can not be dropped into another link, and only allow span,img and i to be dropped into a link:\n        if (elmDrop.closest(\"a\").length > 0) {\n            if ((dragTag == \"a\") || (elmDrag.find(\"a\").length > 0)) {\n                if (dropTag == \"a\") {\n                    isOut = true;\n                }else{\n                    finalShow = false;\n                }  \n            }else if ((dragTag != \"span\") && (dragTag != \"img\") && (dragTag != \"i\")) {\n                if (dropTag == \"a\") {\n                    isOut = true;\n                }else{\n                    finalShow = false;\n                }  \n            }\n\n        }\n\n        // A button can not be dropped into another button\n        if (elmDrop.closest(\"button\").length > 0) {\n            if (!((dragTag == \"span\") || (dragTag == \"i\"))) {\n                if (dropTag == \"button\") {\n                    isOut = true;\n                }else{\n                    finalShow = false;\n                }\n            }\n        }\n\n        // A form can not be dropped into another form\n        if ((dragTag == \"form\") || (elmDrag.find(\"form\").length > 0)) {\n            if (dropTag == \"form\") {\n                isOut = true;\n            }else if (elmDrop.closest(\"form\").length > 0) {\n                finalShow = false;\n                notAllowedMessage = \"You can not drop a Form inside another Form!\";\n            }\n        }\n\n        if ((elmDrop.closest(\"h1\").length > 0) || (elmDrop.closest(\"h2\").length > 0) || (elmDrop.closest(\"h3\").length > 0) || (elmDrop.closest(\"h4\").length > 0) || (elmDrop.closest(\"h5\").length > 0) || (elmDrop.closest(\"h6\").length > 0)) {\n            if ((dragTag == \"span\") || (dragTag == \"small\")) {\n            }else{\n                if ((dropTag == \"h1\") || (dropTag == \"h2\") || (dropTag == \"h3\") || (dropTag == \"h4\") || (dropTag == \"h5\") || (dropTag == \"h6\")) {\n                    isOut = true;\n                }else{\n                    finalShow = false;\n                }\n            }\n        }\n    </script>\n</div>\n<div class=\"beforeDrop\">\n    <script>\n        //list item can only be droped after the text part in the list item <li>xxxxx{here}</li> NOT <li>{here} xxxxx</li> \n        if (injectPoint.element.is(\"li\") == true) { //droppable is list\n            if (injectPoint.position == \"prepend\") { //dropped before text\n                useCustomDrop = true;//trigger custum func\n                injectPoint.element.prev().append(elmDragCode);// custom func makes droppable to be placed after text\n            }\n        }\n    </script>\n</div>\n<div class=\"beforeRemove\">\n    <script>\n        if (elm.parent().is(\"li\")) { //the item to be removed is a child of li (list item)\n            if (elm.parent().children().length == 1) { //check to see if it's the only item\n                elm = elm.parent();//if it is then remove parent instead (list item)\n            }\n        }\n\n    </script>\n</div>\n<div class=\"addButtons\">\n    <script>\n\n        addCustomButton(inEditor, \"imageLink\", \"Link\", \"\", \"\", \"a img\");\n\n        inEditor.find(\"#imageLink\").click(function (event) {\n            focusElement(selectedElement().closest(\"a\"));\n            event.stopPropagation();\n        });\n\n        addCustomButton(inEditor, \"linklParent\", \"Link\", \"\", \"\", \"a.ag-controls > span\");\n        inEditor.find(\"#linklParent\").click(function (event) {\n            focusElement(selectedElement().closest(\"a\"));\n            event.stopPropagation();\n        });\n    </script>\n</div> \n<div class=\"globalOptions\">\n    <div class=\"runOnLoad\">\n        <script>\n            tagReName(\"Cell Index\", \"th[scope='row']\");\n            tagReName(\"Column\", \"th\");\n\n            tagReName(\"Text\", \".ag-text\");\n            designSetting(\"disablePropInspector\", \".ag-text\");\n            designSetting(\"notDraggable\",\".ag-text\");\n            designSetting(\"noCopy\",\".ag-text\");\n\n            designSetting(\"addOutline\",\"blockquote, dl\");\n\n            designSetting(\"notDroppable\",\"option\");\n            designSetting(\"notDraggable\",\"option\");\n            designSetting(\"noCopy\",\"option\");\n\n            designSetting(\"addTextTo\", \"h1, h2, h3, h4, h5, h6\");\n\n            attrAutoComplete[\"HTML\"] = {requirement: \"\", attributes: [\"title\"]};\n        </script>\n    </div>\n\n    <div class=\"cleanUpBeforePublish\">\n        <script>\n            pageClone.find(\".ag-text\").each(function () {\n                $(this).replaceWith($(this).text());\n            });\n        </script>\n    </div>\n</div>\n</div><div class=\"codeUsedForPublishing\"><script>// Collect all 'style' attributes and place them inside a CSS <style> tag:\n\n\n// collect all 'style' attributes with similar values and place inside an array:\nvar styleList = [];\n\npageClone.find(\"*[style]\").each(function() {\n    var styleVal = $(this).attr(\"style\");\n    if (styleList.indexOf(styleVal) == -1) {\n        styleList.push(styleVal);\n    }\n});\n\nvar styleCode = \"\";\nvar classCount = [];\n\n// replace 'style' attribute with classnames:\npageClone.find(\"*[style]\").each(function() {\n    var styleVal = $(this).attr(\"style\");\n    if (styleVal.replace(/\\s/g,'') != \"\"){\n        var styleIndex = styleList.indexOf(styleVal);\n        if (styleIndex != -1) {\n            var metaTitle = escapeHtml(pageClone.find(\"meta-component\").find(\".meta-title\").val());\n\n            metaTitle = metaTitle.replace(/[^\\w\\s]/gi, '').replace(/^\\s+|\\s+$/g,'').split(' ').join('-');\n            if (metaTitle == \"\"){\n                metaTitle = \"ag-style\"\n            }\n\n            var newClass = metaTitle + \"-\" + styleIndex;\n            if (classCount.indexOf(styleIndex) == -1) {\n                classCount.push(styleIndex);\n                \n                styleCode = styleCode + \".\" + newClass + \"{\" + autoprefixer.process(styleVal, '', ['> 0.01%']) + \"} \";\n            }\n\n            $(this).addClass(newClass);\n            $(this).removeAttr(\"style\");\n        }\n    }else{\n        $(this).removeAttr(\"style\");\n    }\n});\n\nif (styleCode != \"\"){\n    styles = styles + '<style type=\"text/css\">' + styleCode + '</style>';\n}\n\nstyleList = [];\nclassCount = [];</script></div></div>"};